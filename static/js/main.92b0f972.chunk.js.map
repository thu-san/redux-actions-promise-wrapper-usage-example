{"version":3,"sources":["reducers/auth.tsx","containers/Auth.tsx","reducers/index.tsx","store/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["handleLogin","authSaga","loginAction","createAction","regenerator_default","a","mark","_callee","arg","wrap","_context","prev","next","abrupt","undefined","stop","logoutAction","_ref","account","putLoginSuccess","_context2","delay","put","success","session","Date","toString","reg","_marked","_context3","all","takeLatest","TRIGGER","handleTrigger","_marked2","INITIAL_STATE","reducer","state","arguments","length","action","type","SUCCESS","_action$payload","payload","Object","objectSpread","console","log","concat","Dash","_PureComponent","_getPrototypeOf2","_this","classCallCheck","this","_len","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","loading","asyncToGenerator","_loginAction","promise","result","props","setState","sent","alert","handleLogout","_callee2","_this$props","inherits","createClass","key","value","_this2","_this$props2","authAccount","_this$state","loggedIn","react_default","createElement","style","display","height","justifyContent","alignItems","onClick","Fragment","placeholder","onChange","_ref3","target","PureComponent","mapDispatchToProps","connect","_ref4","_ref4$auth","auth","reducers","combineReducers","rootSaga","newWindow","window","sagaMiddleware","createSagaMiddleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","run","App","es","Auth","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6UAkBUA,cASOC,GAnBJC,EAAcC,uBAAa,gBAAiB,gBAA9BA,CACzBH,EADyBI,EAAAC,EAAAC,KAEzB,SAAAC,EAAUC,GAAV,OAAAJ,EAAAC,EAAAI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAG,OAAA,cACSC,GADT,wBAAAJ,EAAAK,SAAAR,MAIWS,EAAeb,uBAAa,iBAAbA,GAI5B,SAAUH,EAAViB,GAAA,IAAAC,EAAAC,EAAA,OAAAf,EAAAC,EAAAI,KAAA,SAAAW,GAAA,cAAAA,EAAAT,KAAAS,EAAAR,MAAA,OACE,OADsBM,EAAxBD,EAAwBC,QAAxBE,EAAAR,KAAA,EACQS,gBAAM,KADd,OAKE,OAHMF,EAAkBG,cACtBpB,EAAYqB,QAAQ,CAAEC,SAAS,IAAIC,MAAOC,WAAYR,aAH1DE,EAAAR,KAAA,EAKQO,EALR,cAAAC,EAAAP,OAAA,SAMSc,cAAIT,IANb,wBAAAE,EAAAL,SAAAa,GASO,SAAU3B,IAAV,OAAAG,EAAAC,EAAAI,KAAA,SAAAoB,GAAA,cAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,OACL,OADKiB,EAAAjB,KAAA,EACCkB,cAAI,CAACC,qBAAW7B,EAAY8B,QAAS9B,EAAY+B,iBADlD,wBAAAJ,EAAAd,SAAAmB,GAUP,IAAMC,EAAuB,GAuBdC,EAhB0B,WAAmC,IAAlCC,EAAkCC,UAAAC,OAAA,QAAAzB,IAAAwB,UAAA,GAAAA,UAAA,GAA1BH,EAAeK,EAAWF,UAAAC,OAAA,EAAAD,UAAA,QAAAxB,EAC1E,OAAQ0B,EAAOC,MACb,KAAKvC,EAAYwC,QAAS,IAAAC,EACKH,EAAOI,QAA5B1B,EADgByB,EAChBzB,QAASM,EADOmB,EACPnB,QACjB,OAAOqB,OAAAC,EAAA,EAAAD,CAAA,GAAKR,EAAZ,CAAmBnB,UAASM,YAE9B,KAAKR,EAAagB,QAAS,IACjBR,EAAYgB,EAAOI,QAAnBpB,QAER,OADAuB,QAAQC,IAAR,6BAAAC,OAAyCzB,IAClC,GAET,QACE,OAAOa,IC5CAa,EAAb,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAAC,EAAAR,OAAAS,EAAA,EAAAT,CAAAU,KAAAL,GAAA,QAAAM,EAAAlB,UAAAC,OAAAkB,EAAA,IAAAC,MAAAF,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAAF,EAAAE,GAAArB,UAAAqB,GAAA,OAAAN,EAAAR,OAAAe,EAAA,EAAAf,CAAAU,MAAAH,EAAAP,OAAAgB,EAAA,EAAAhB,CAAAK,IAAAY,KAAAC,MAAAX,EAAA,CAAAG,MAAAN,OAAAQ,MACEpB,MAAgB,CACdnB,QAAS,GACT8C,SAAS,GAHbX,EAMErD,YANF6C,OAAAoB,EAAA,EAAApB,CAAAzC,EAAAC,EAAAC,KAMgB,SAAAC,IAAA,IAAAL,EAAAgB,EAAAgD,EAAAC,EAAAC,EAAA,OAAAhE,EAAAC,EAAAI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACJV,EAAgBmD,EAAKgB,MAArBnE,YACAgB,EAAYmC,EAAKhB,MAAjBnB,QACRmC,EAAKiB,SAAS,CAAEN,SAAS,IAHbE,EAIQhE,EAAY,CAAEgB,YAA1BiD,EAJID,EAIJC,QAJIzD,EAAAE,KAAA,EAKSuD,EALT,OAKNC,EALM1D,EAAA6D,KAMZC,MAAK,4BAAAvB,OAA6BmB,IAClCf,EAAKiB,SAAS,CAAEN,SAAS,IAPb,wBAAAtD,EAAAK,SAAAR,MANhB8C,EAgBEoB,aAhBF5B,OAAAoB,EAAA,EAAApB,CAAAzC,EAAAC,EAAAC,KAgBiB,SAAAoE,IAAA,IAAAC,EAAAnD,EAAAR,EAAA,OAAAZ,EAAAC,EAAAI,KAAA,SAAAW,GAAA,cAAAA,EAAAT,KAAAS,EAAAR,MAAA,OAAA+D,EACqBtB,EAAKgB,MAA/B7C,EADKmD,EACLnD,QAASR,EADJ2D,EACI3D,aACbQ,GACFR,EAAa,CAAEQ,YAHJ,wBAAAJ,EAAAL,SAAA2D,MAhBjBrB,EAAA,OAAAR,OAAA+B,EAAA,EAAA/B,CAAAK,EAAAC,GAAAN,OAAAgC,EAAA,EAAAhC,CAAAK,EAAA,EAAA4B,IAAA,SAAAC,MAAA,WAuBW,IAAAC,EAAAzB,KAAA0B,EACmC1B,KAAKc,MAAvC7C,EADDyD,EACCzD,QAAkB0D,EADnBD,EACU/D,QADViE,EAEsB5B,KAAKlB,MAA1BnB,EAFDiE,EAECjE,QAAS8C,EAFVmB,EAEUnB,QAEXoB,IAAa5D,EAEnB,OACE6D,EAAAhF,EAAAiF,cAAA,OACEC,MAAO,CACLC,QAAS,OACTC,OAAQ,IACRC,eAAgB,SAChBC,WAAY,WAGdN,EAAAhF,EAAAiF,cAAA,WACED,EAAAhF,EAAAiF,cAAA,oBAAYF,EAAW,YAAc,cACrCC,EAAAhF,EAAAiF,cAAA,qBAAa9D,GACb6D,EAAAhF,EAAAiF,cAAA,mBAAWJ,GACVlB,EACC,aACEoB,EACFC,EAAAhF,EAAAiF,cAAA,UAAQM,QAASrC,KAAKkB,cAAtB,UAEAY,EAAAhF,EAAAiF,cAAAD,EAAAhF,EAAAwF,SAAA,KACER,EAAAhF,EAAAiF,cAAA,SACED,EAAAhF,EAAAiF,cAAA,SACE7C,KAAK,OACLqD,YAAY,UACZf,MAAO7D,EACP6E,SAAU,SAAAC,GAAA,IAAajB,EAAbiB,EAAGC,OAAUlB,MAAb,OACRC,EAAKV,SAAS,CAAEpD,QAAS6D,QAI/BM,EAAAhF,EAAAiF,cAAA,UAAQM,QAASrC,KAAKvD,aAAtB,gBA1DdkD,EAAA,CAA0BgD,iBAwEpBC,EAAqB,CACzBjG,cACAc,gBAGaoF,cAVS,SAAAC,GAAA,IAAAC,EAAAD,EAAGE,KAAH,MAA+C,CACrErF,QADsBoF,EAAWpF,QAEjCM,QAFsB8E,EAAoB9E,UAY1C2E,EAFaC,CAGblD,kBCvFIsD,EAAWC,YAAgB,CAC/BF,SAMWG,EAAQtG,EAAAC,EAAAC,KAAG,SAAXoG,IAAW,OAAAtG,EAAAC,EAAAI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACtB,OADsBF,EAAAE,KAAA,EAChBkB,cAAI,CAAC7B,MADW,wBAAAS,EAAAK,SAAX2F,KAIEF,ICXTG,EAAYC,OAEZC,EAAiBC,cAEjBC,EACJJ,EAAUK,sCAAwCC,IACvCC,EAAQC,YACnBX,EACAO,EAAiBK,YAAgBP,KAEnCA,EAAeQ,IAAIX,OCGJY,mLARX,OACEjC,EAAAhF,EAAAiF,cAACiC,EAAA,EAAD,CAAUL,MAAOA,GACf7B,EAAAhF,EAAAiF,cAACkC,EAAD,cAJUC,aCIEC,QACW,cAA7Bd,OAAOe,SAASC,UAEe,UAA7BhB,OAAOe,SAASC,UAEhBhB,OAAOe,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1C,EAAAhF,EAAAiF,cAAC0C,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.92b0f972.chunk.js","sourcesContent":["import { AnyAction, Reducer } from 'redux';\nimport { createAction, ExtractActions, put, reg } from 'redux-actions-promise-wrapper';\nimport { all, delay, takeLatest } from 'redux-saga/effects';\n\ninterface ILoginTriggerPayload {\n  account: string;\n}\n\nexport const loginAction = createAction('LOGIN/TRIGGER', 'LOGIN/SUCCESS')(\n  handleLogin,\n  function*(arg: { session: string; account: string }) {\n    return undefined;\n  }\n);\nexport const logoutAction = createAction('LOGOUT/TRIGGER')<{\n  session: string;\n}>();\n\nfunction* handleLogin({ account }: ILoginTriggerPayload) {\n  yield delay(1000);\n  const putLoginSuccess = put(\n    loginAction.success({ session: new Date().toString(), account })\n  );\n  yield putLoginSuccess;\n  return reg(account);\n}\n\nexport function* authSaga() {\n  yield all([takeLatest(loginAction.TRIGGER, loginAction.handleTrigger)]);\n}\n// =========================================================\n// REDUCER\ninterface IAuth {\n  account?: string;\n  session?: string;\n}\n\nconst INITIAL_STATE: IAuth = {};\n\ntype Actions = ExtractActions<{\n  loginAction: typeof loginAction;\n  logoutAction: typeof logoutAction;\n}>;\n\nconst reducer: Reducer<IAuth, Actions> = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case loginAction.SUCCESS: {\n      const { account, session } = action.payload;\n      return { ...state, account, session };\n    }\n    case logoutAction.TRIGGER: {\n      const { session } = action.payload;\n      console.log(`LOGOUT Reducer Session -  ${session}`);\n      return {};\n    }\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\n\nimport { AppState } from '../reducers';\nimport { loginAction, logoutAction } from '../reducers/auth';\n\ninterface IState {\n  account: string;\n  loading: boolean;\n}\ntype IProp = ReturnType<typeof mapStateToProps> & typeof mapDispatchToProps;\nexport class Dash extends PureComponent<IProp, IState> {\n  state: IState = {\n    account: '',\n    loading: false\n  };\n\n  handleLogin = async () => {\n    const { loginAction } = this.props;\n    const { account } = this.state;\n    this.setState({ loading: true });\n    const { promise } = loginAction({ account });\n    const result = await promise;\n    alert(`You are now logged in as ${result}`);\n    this.setState({ loading: false });\n  };\n\n  handleLogout = async () => {\n    const { session, logoutAction } = this.props;\n    if (session) {\n      logoutAction({ session });\n    }\n  };\n\n  render() {\n    const { session, account: authAccount } = this.props;\n    const { account, loading } = this.state;\n\n    const loggedIn = !!session;\n\n    return (\n      <div\n        style={{\n          display: 'flex',\n          height: 500,\n          justifyContent: 'center',\n          alignItems: 'center'\n        }}\n      >\n        <div>\n          <p>Status: {loggedIn ? 'Logged In' : 'Logged Out'}</p>\n          <p>Session: {session}</p>\n          <p>Email: {authAccount}</p>\n          {loading ? (\n            '...loading'\n          ) : loggedIn ? (\n            <button onClick={this.handleLogout}>Logout</button>\n          ) : (\n            <>\n              <p>\n                <input\n                  type=\"text\"\n                  placeholder=\"account\"\n                  value={account}\n                  onChange={({ target: { value } }) =>\n                    this.setState({ account: value })\n                  }\n                />\n              </p>\n              <button onClick={this.handleLogin}>Login</button>\n            </>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ auth: { account, session } }: AppState) => ({\n  account,\n  session\n});\n\nconst mapDispatchToProps = {\n  loginAction,\n  logoutAction\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Dash);\n","import { combineReducers } from 'redux';\nimport { all } from 'redux-saga/effects';\n\nimport auth, { authSaga } from './auth';\n\nconst reducers = combineReducers({\n  auth\n});\n\nexport type AppState = ReturnType<typeof reducers>;\n\n// saga\nexport const rootSaga = function*() {\n  yield all([authSaga()]);\n};\n\nexport default reducers;\n","import { applyMiddleware, compose, createStore, Middleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n\nimport reducers, { rootSaga } from '../reducers';\n\nconst newWindow = window as any;\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst composeEnhancers =\n  newWindow.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nexport const store = createStore(\n  reducers,\n  composeEnhancers(applyMiddleware(sagaMiddleware))\n);\nsagaMiddleware.run(rootSaga);\n","import './App.css';\n\nimport React, { Component } from 'react';\nimport { Provider } from 'react-redux';\n\nimport Auth from './containers/Auth';\nimport { store } from './store';\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <Auth />\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}